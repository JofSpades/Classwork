# Maxwell Petersen
# mpeter39
# Execution begins at address o
		.pos 0
init:	irmovl Stack, %esp
		irmovl Stack, %ebp
		call Main
		halt

# Linked list of 3 elements
		.align 6
ele1:	.long 0x00a
		.long ele2
ele2:	.long 0x0b0
		.long ele3
ele3:	.long 0xc00
		.long 0

Main:
		pushl %ebp
		rrmovl %esp, %ebp
		irmovl $4, %eax
		pushl %eax
		irmovl ele1, %edx
		pushl %edx
		irmovl ele2, %edx
		pushl %edx
		irmovl ele3, %edx
		call sum_list
		rrmovl %ebp, %esp
		popl %ebp
		ret

sum_list:
		pushl %ebp
        rrmovl %esp,%ebp
        mrmovl 12(%ebp), %ecx
        xorl %eax, %eax         # val=0
        andl  %ecx,%ecx         #
        je     End              # jump if edx == 0
Loop:
     	mrmovl (%ecx),%esi		# get *ls
        addl %esi,%eax          # add to val
        mrmovl 4(%ecx), %ecx    # get next element
        andl %ecx,%ecx
        jne    Loop             # Stop when 0
End:
    	rrmovl %ebp, %esp
        popl %ebp               # restore stack frame
        ret


# The stack goes here
	.pos 0x100
Stack:	
