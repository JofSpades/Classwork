                      | #######################################################################
                      | # Test for copying block of size 100;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f468050000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f568050000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f064000000 | 	irmovl $100, %eax		# src and dst have 100 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f094030000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0fc010000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802f000000   | 	call ncopy		 
  0x029: 800b010000   | 	call check	        # Call checker code
  0x02e: 00           | 	halt                    # should halt with 0xaaaa in %eax
  0x02f:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | # Maxwell Petersen - mpeter39
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02f: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x031: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x033: a06f         | 	pushl %esi		# Save callee-save regs
  0x035: a03f         | 	pushl %ebx
  0x037: a07f         | 	pushl %edi
  0x039: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03f: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x045: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x04b: 6300         | 	xorl %eax,%eax		# count = 0;
  0x04d: 6222         | 	andl %edx,%edx		# len <= 0?
  0x04f: 71f8000000   | 	jle End 			# if so, goto End:
                      | 
  0x054:              | Loop:
                      | 	#mrmovl (%ebx), %esi	# read val from src...
                      | 	#rmmovl %esi, (%ecx)	# ...and store it to dst
                      | 	#andl %esi, %esi
                      | 	#jle Npos
                      | 	#iaddl $1, %eax		# count++
                      | 
  0x054:              | Npos:
  0x054: 6222         | 	andl %edx,%edx		# len > 0?
  0x056: 71bf000000   | 	jle Clean
  0x05b: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x061: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x067: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x06d: c0f304000000 | 	iaddl $4, %ebx		# src++
  0x073: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x079: 6266         | 	andl %esi, %esi
  0x07b: 7186000000   | 	jle Npos2
  0x080: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x086:              | Npos2:
  0x086: 6222         | 	andl %edx,%edx		# len > 0?
  0x088: 71bf000000   | 	jle Clean
  0x08d: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x093: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x099: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x09f: c0f304000000 | 	iaddl $4, %ebx		# src++
  0x0a5: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x0ab: 6266         | 	andl %esi, %esi
  0x0ad: 71b8000000   | 	jle LoopUp
  0x0b2: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0b8:              | LoopUp:
  0x0b8: 6222         | 	andl %edx,%edx		# len > 0?
  0x0ba: 7654000000   | 	jg Npos				# if so, goto Loop:
                      | 
  0x0bf:              | Clean:
  0x0bf: 6222         | 	andl %edx,%edx		# len = 0?
  0x0c1: 73f8000000   | 	je End				# if so, goto End:
  0x0c6: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x0cc: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x0d2: 6266         | 	andl %esi, %esi
  0x0d4: 71df000000   | 	jle Clean2
  0x0d9: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0df:              | Clean2:
  0x0df: c0f201000000 | 	iaddl $1, %edx		# len++
  0x0e5: c0f304000000 | 	iaddl $4, %ebx		# src++
  0x0eb: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x0f1: 6222         | 	andl %edx,%edx		# len > 0?
  0x0f3: 76bf000000   | 	jg Clean			# if so, goto Loop:
                      | 
  0x0f8:              | End:
  0x0f8: b07f         | 	popl %edi
  0x0fa: b03f         | 	popl %ebx
  0x0fc: b06f         | 	popl %esi
  0x0fe: d0           | 	leave
  0x0ff: 90           | 	ret
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x100:              | Done:
  0x100: b07f         | 	popl %edi               # Restore callee-save registers
  0x102: b03f         | 	popl %ebx
  0x104: b06f         | 	popl %esi
  0x106: 2054         | 	rrmovl %ebp, %esp
  0x108: b05f         | 	popl %ebp
  0x10a: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x10b:              | End:
                      | #/* $end ncopy-ys */
  0x10b:              | EndFun:
                      | #################################################################### 
                      | # Epilogue code for the correctness testing driver
                      | ####################################################################
                      | 
                      | # This is the correctness checking code.
                      | # It checks:
                      | #   1. %eax has 48.  Set %eax to 0xbbbb if not.
                      | #   2. The total length of the code is less than or equal to 1000.
                      | #      Set %eax to 0xcccc if not.
                      | #   3. The source data was copied to the destination.
                      | #      Set %eax to 0xdddd if not.
                      | #   4. The words just before and just after the destination region
                      | #      were not corrupted.  Set %eax to 0xeeee if not.
                      | # If all checks pass, then sets %eax to 0xaaaa
  0x10b:              | check:
  0x10b: a05f         | 	pushl %ebp
  0x10d: 2045         | 	rrmovl %esp,%ebp
  0x10f: a06f         | 	pushl %esi
  0x111: a03f         | 	pushl %ebx
  0x113: a07f         | 	pushl %edi
                      | 	# Return value test
  0x115: 30f230000000 | 	irmovl $48,%edx
  0x11b: 6120         | 	subl %edx,%eax
  0x11d: 732d010000   | 	je checkb
  0x122: 30f0bbbb0000 | 	irmovl $0xbbbb,%eax  # Failed test #1
  0x128: 70ef010000   | 	jmp cdone
  0x12d:              | checkb:
                      | 	# Code length check
  0x12d: 30f00b010000 | 	irmovl EndFun,%eax
  0x133: 30f22f000000 | 	irmovl StartFun,%edx
  0x139: 6120         | 	subl %edx,%eax
  0x13b: 30f2e8030000 | 	irmovl $1000,%edx
  0x141: 6102         | 	subl %eax,%edx
  0x143: 7553010000   | 	jge checkm
  0x148: 30f0cccc0000 | 	irmovl $0xcccc,%eax  # Failed test #2
  0x14e: 70ef010000   | 	jmp cdone
  0x153:              | checkm:
  0x153: 30f294030000 | 	irmovl dest, %edx # Pointer to next destination location
  0x159: 30f3fc010000 | 	irmovl src,%ebx   # Pointer to next source location
  0x15f: 30f764000000 | 	irmovl $100,%edi  # Count
  0x165: 6277         | 	andl %edi,%edi
  0x167: 73a1010000   | 	je checkpre         # Skip check if count = 0
  0x16c:              | mcloop:
  0x16c: 500200000000 | 	mrmovl (%edx),%eax
  0x172: 506300000000 | 	mrmovl (%ebx),%esi
  0x178: 6160         | 	subl %esi,%eax
  0x17a: 738a010000   | 	je  mok
  0x17f: 30f0dddd0000 | 	irmovl $0xdddd,%eax # Failed test #3
  0x185: 70ef010000   | 	jmp cdone
  0x18a:              | mok:
  0x18a: 30f004000000 | 	irmovl $4,%eax
  0x190: 6002         | 	addl %eax,%edx	  # dest ++
  0x192: 6003         | 	addl %eax,%ebx    # src++
  0x194: 30f001000000 | 	irmovl $1,%eax
  0x19a: 6107         | 	subl %eax,%edi    # cnt--
  0x19c: 766c010000   | 	jg mcloop
  0x1a1:              | checkpre:
                      | 	# Check for corruption
  0x1a1: 30f290030000 | 	irmovl Predest,%edx
  0x1a7: 500200000000 | 	mrmovl (%edx), %eax  # Get word before destination
  0x1ad: 30f2fadebc00 | 	irmovl $0xbcdefa, %edx
  0x1b3: 6120         | 	subl %edx,%eax
  0x1b5: 73c5010000   | 	je checkpost
  0x1ba: 30f0eeee0000 | 	irmovl $0xeeee,%eax  # Failed test #4
  0x1c0: 70ef010000   | 	jmp cdone
  0x1c5:              | checkpost:
                      | 	# Check for corruption
  0x1c5: 30f224050000 | 	irmovl Postdest,%edx
  0x1cb: 500200000000 | 	mrmovl (%edx), %eax  # Get word after destination
  0x1d1: 30f2bcfade00 | 	irmovl $0xdefabc, %edx
  0x1d7: 6120         | 	subl %edx,%eax
  0x1d9: 73e9010000   | 	je checkok
  0x1de: 30f0eeee0000 | 	irmovl $0xeeee,%eax # Failed test #4
  0x1e4: 70ef010000   | 	jmp cdone
  0x1e9:              | checkok:
                      | 	# Successful checks
  0x1e9: 30f0aaaa0000 | 	irmovl $0xaaaa,%eax
  0x1ef:              | cdone:
  0x1ef: b07f         | 	popl %edi
  0x1f1: b03f         | 	popl %ebx
  0x1f3: b06f         | 	popl %esi
  0x1f5: 2054         | 	rrmovl %ebp, %esp
  0x1f7: b05f         | 	popl %ebp
  0x1f9: 90           | 	ret
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x1fc:              | 	.align 4
  0x1fc:              | src:
  0x1fc: 01000000     | 	.long 1
  0x200: 02000000     | 	.long 2
  0x204: 03000000     | 	.long 3
  0x208: 04000000     | 	.long 4
  0x20c: 05000000     | 	.long 5
  0x210: 06000000     | 	.long 6
  0x214: 07000000     | 	.long 7
  0x218: 08000000     | 	.long 8
  0x21c: f7ffffff     | 	.long -9
  0x220: 0a000000     | 	.long 10
  0x224: f5ffffff     | 	.long -11
  0x228: f4ffffff     | 	.long -12
  0x22c: f3ffffff     | 	.long -13
  0x230: 0e000000     | 	.long 14
  0x234: f1ffffff     | 	.long -15
  0x238: 10000000     | 	.long 16
  0x23c: 11000000     | 	.long 17
  0x240: eeffffff     | 	.long -18
  0x244: edffffff     | 	.long -19
  0x248: ecffffff     | 	.long -20
  0x24c: ebffffff     | 	.long -21
  0x250: eaffffff     | 	.long -22
  0x254: e9ffffff     | 	.long -23
  0x258: e8ffffff     | 	.long -24
  0x25c: 19000000     | 	.long 25
  0x260: 1a000000     | 	.long 26
  0x264: 1b000000     | 	.long 27
  0x268: 1c000000     | 	.long 28
  0x26c: 1d000000     | 	.long 29
  0x270: e2ffffff     | 	.long -30
  0x274: e1ffffff     | 	.long -31
  0x278: 20000000     | 	.long 32
  0x27c: 21000000     | 	.long 33
  0x280: deffffff     | 	.long -34
  0x284: ddffffff     | 	.long -35
  0x288: dcffffff     | 	.long -36
  0x28c: 25000000     | 	.long 37
  0x290: daffffff     | 	.long -38
  0x294: d9ffffff     | 	.long -39
  0x298: d8ffffff     | 	.long -40
  0x29c: 29000000     | 	.long 41
  0x2a0: d6ffffff     | 	.long -42
  0x2a4: d5ffffff     | 	.long -43
  0x2a8: 2c000000     | 	.long 44
  0x2ac: 2d000000     | 	.long 45
  0x2b0: d2ffffff     | 	.long -46
  0x2b4: 2f000000     | 	.long 47
  0x2b8: 30000000     | 	.long 48
  0x2bc: cfffffff     | 	.long -49
  0x2c0: 32000000     | 	.long 50
  0x2c4: 33000000     | 	.long 51
  0x2c8: 34000000     | 	.long 52
  0x2cc: 35000000     | 	.long 53
  0x2d0: caffffff     | 	.long -54
  0x2d4: c9ffffff     | 	.long -55
  0x2d8: c8ffffff     | 	.long -56
  0x2dc: 39000000     | 	.long 57
  0x2e0: 3a000000     | 	.long 58
  0x2e4: c5ffffff     | 	.long -59
  0x2e8: 3c000000     | 	.long 60
  0x2ec: c3ffffff     | 	.long -61
  0x2f0: c2ffffff     | 	.long -62
  0x2f4: 3f000000     | 	.long 63
  0x2f8: c0ffffff     | 	.long -64
  0x2fc: 41000000     | 	.long 65
  0x300: beffffff     | 	.long -66
  0x304: 43000000     | 	.long 67
  0x308: bcffffff     | 	.long -68
  0x30c: 45000000     | 	.long 69
  0x310: baffffff     | 	.long -70
  0x314: b9ffffff     | 	.long -71
  0x318: b8ffffff     | 	.long -72
  0x31c: 49000000     | 	.long 73
  0x320: b6ffffff     | 	.long -74
  0x324: 4b000000     | 	.long 75
  0x328: b4ffffff     | 	.long -76
  0x32c: b3ffffff     | 	.long -77
  0x330: 4e000000     | 	.long 78
  0x334: b1ffffff     | 	.long -79
  0x338: b0ffffff     | 	.long -80
  0x33c: afffffff     | 	.long -81
  0x340: aeffffff     | 	.long -82
  0x344: 53000000     | 	.long 83
  0x348: 54000000     | 	.long 84
  0x34c: abffffff     | 	.long -85
  0x350: 56000000     | 	.long 86
  0x354: 57000000     | 	.long 87
  0x358: a8ffffff     | 	.long -88
  0x35c: a7ffffff     | 	.long -89
  0x360: a6ffffff     | 	.long -90
  0x364: a5ffffff     | 	.long -91
  0x368: a4ffffff     | 	.long -92
  0x36c: 5d000000     | 	.long 93
  0x370: 5e000000     | 	.long 94
  0x374: a1ffffff     | 	.long -95
  0x378: 60000000     | 	.long 96
  0x37c: 9fffffff     | 	.long -97
  0x380: 62000000     | 	.long 98
  0x384: 63000000     | 	.long 99
  0x388: 9cffffff     | 	.long -100
  0x38c: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x390:              | 	.align 16
  0x390:              | Predest:
  0x390: fadebc00     | 	.long 0xbcdefa
  0x394:              | dest:
  0x394: abefcd00     | 	.long 0xcdefab
  0x398: abefcd00     | 	.long 0xcdefab
  0x39c: abefcd00     | 	.long 0xcdefab
  0x3a0: abefcd00     | 	.long 0xcdefab
  0x3a4: abefcd00     | 	.long 0xcdefab
  0x3a8: abefcd00     | 	.long 0xcdefab
  0x3ac: abefcd00     | 	.long 0xcdefab
  0x3b0: abefcd00     | 	.long 0xcdefab
  0x3b4: abefcd00     | 	.long 0xcdefab
  0x3b8: abefcd00     | 	.long 0xcdefab
  0x3bc: abefcd00     | 	.long 0xcdefab
  0x3c0: abefcd00     | 	.long 0xcdefab
  0x3c4: abefcd00     | 	.long 0xcdefab
  0x3c8: abefcd00     | 	.long 0xcdefab
  0x3cc: abefcd00     | 	.long 0xcdefab
  0x3d0: abefcd00     | 	.long 0xcdefab
  0x3d4: abefcd00     | 	.long 0xcdefab
  0x3d8: abefcd00     | 	.long 0xcdefab
  0x3dc: abefcd00     | 	.long 0xcdefab
  0x3e0: abefcd00     | 	.long 0xcdefab
  0x3e4: abefcd00     | 	.long 0xcdefab
  0x3e8: abefcd00     | 	.long 0xcdefab
  0x3ec: abefcd00     | 	.long 0xcdefab
  0x3f0: abefcd00     | 	.long 0xcdefab
  0x3f4: abefcd00     | 	.long 0xcdefab
  0x3f8: abefcd00     | 	.long 0xcdefab
  0x3fc: abefcd00     | 	.long 0xcdefab
  0x400: abefcd00     | 	.long 0xcdefab
  0x404: abefcd00     | 	.long 0xcdefab
  0x408: abefcd00     | 	.long 0xcdefab
  0x40c: abefcd00     | 	.long 0xcdefab
  0x410: abefcd00     | 	.long 0xcdefab
  0x414: abefcd00     | 	.long 0xcdefab
  0x418: abefcd00     | 	.long 0xcdefab
  0x41c: abefcd00     | 	.long 0xcdefab
  0x420: abefcd00     | 	.long 0xcdefab
  0x424: abefcd00     | 	.long 0xcdefab
  0x428: abefcd00     | 	.long 0xcdefab
  0x42c: abefcd00     | 	.long 0xcdefab
  0x430: abefcd00     | 	.long 0xcdefab
  0x434: abefcd00     | 	.long 0xcdefab
  0x438: abefcd00     | 	.long 0xcdefab
  0x43c: abefcd00     | 	.long 0xcdefab
  0x440: abefcd00     | 	.long 0xcdefab
  0x444: abefcd00     | 	.long 0xcdefab
  0x448: abefcd00     | 	.long 0xcdefab
  0x44c: abefcd00     | 	.long 0xcdefab
  0x450: abefcd00     | 	.long 0xcdefab
  0x454: abefcd00     | 	.long 0xcdefab
  0x458: abefcd00     | 	.long 0xcdefab
  0x45c: abefcd00     | 	.long 0xcdefab
  0x460: abefcd00     | 	.long 0xcdefab
  0x464: abefcd00     | 	.long 0xcdefab
  0x468: abefcd00     | 	.long 0xcdefab
  0x46c: abefcd00     | 	.long 0xcdefab
  0x470: abefcd00     | 	.long 0xcdefab
  0x474: abefcd00     | 	.long 0xcdefab
  0x478: abefcd00     | 	.long 0xcdefab
  0x47c: abefcd00     | 	.long 0xcdefab
  0x480: abefcd00     | 	.long 0xcdefab
  0x484: abefcd00     | 	.long 0xcdefab
  0x488: abefcd00     | 	.long 0xcdefab
  0x48c: abefcd00     | 	.long 0xcdefab
  0x490: abefcd00     | 	.long 0xcdefab
  0x494: abefcd00     | 	.long 0xcdefab
  0x498: abefcd00     | 	.long 0xcdefab
  0x49c: abefcd00     | 	.long 0xcdefab
  0x4a0: abefcd00     | 	.long 0xcdefab
  0x4a4: abefcd00     | 	.long 0xcdefab
  0x4a8: abefcd00     | 	.long 0xcdefab
  0x4ac: abefcd00     | 	.long 0xcdefab
  0x4b0: abefcd00     | 	.long 0xcdefab
  0x4b4: abefcd00     | 	.long 0xcdefab
  0x4b8: abefcd00     | 	.long 0xcdefab
  0x4bc: abefcd00     | 	.long 0xcdefab
  0x4c0: abefcd00     | 	.long 0xcdefab
  0x4c4: abefcd00     | 	.long 0xcdefab
  0x4c8: abefcd00     | 	.long 0xcdefab
  0x4cc: abefcd00     | 	.long 0xcdefab
  0x4d0: abefcd00     | 	.long 0xcdefab
  0x4d4: abefcd00     | 	.long 0xcdefab
  0x4d8: abefcd00     | 	.long 0xcdefab
  0x4dc: abefcd00     | 	.long 0xcdefab
  0x4e0: abefcd00     | 	.long 0xcdefab
  0x4e4: abefcd00     | 	.long 0xcdefab
  0x4e8: abefcd00     | 	.long 0xcdefab
  0x4ec: abefcd00     | 	.long 0xcdefab
  0x4f0: abefcd00     | 	.long 0xcdefab
  0x4f4: abefcd00     | 	.long 0xcdefab
  0x4f8: abefcd00     | 	.long 0xcdefab
  0x4fc: abefcd00     | 	.long 0xcdefab
  0x500: abefcd00     | 	.long 0xcdefab
  0x504: abefcd00     | 	.long 0xcdefab
  0x508: abefcd00     | 	.long 0xcdefab
  0x50c: abefcd00     | 	.long 0xcdefab
  0x510: abefcd00     | 	.long 0xcdefab
  0x514: abefcd00     | 	.long 0xcdefab
  0x518: abefcd00     | 	.long 0xcdefab
  0x51c: abefcd00     | 	.long 0xcdefab
  0x520: abefcd00     | 	.long 0xcdefab
  0x524:              | Postdest:
  0x524: bcfade00     | 	.long 0xdefabc
                      | 
  0x528:              | .align 4
                      | # Run time stack
  0x528: 00000000     | 	.long 0
  0x52c: 00000000     | 	.long 0
  0x530: 00000000     | 	.long 0
  0x534: 00000000     | 	.long 0
  0x538: 00000000     | 	.long 0
  0x53c: 00000000     | 	.long 0
  0x540: 00000000     | 	.long 0
  0x544: 00000000     | 	.long 0
  0x548: 00000000     | 	.long 0
  0x54c: 00000000     | 	.long 0
  0x550: 00000000     | 	.long 0
  0x554: 00000000     | 	.long 0
  0x558: 00000000     | 	.long 0
  0x55c: 00000000     | 	.long 0
  0x560: 00000000     | 	.long 0
  0x564: 00000000     | 	.long 0
                      | 
  0x568:              | Stack:
