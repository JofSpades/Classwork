                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f454050000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f554050000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f014040000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f008030000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.				 #
                      | # Return the number of positive ints (>0) contained in src.		 #
                      | #																 #
                      | # Include your name and ID here.								 #
                      | # Maxwell Petersen - mpeter39									 #
                      | # Describe how and why you modified the baseline code.			 #
                      | # Implamented IADDL and made code to skip over Done so I could	 #
                      | # use the leave function. Then I unrlled the loop to the 16th    #
                      | # element with checks for end at each part. Currently using      #
                      | # ./benchmark.pl I get 12.89CPE 								 #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax, %eax
                      | 
  0x048:              | Npos:
  0x048: 6222         | 	andl %edx, %edx		# len > 0?
  0x04a: 71bb020000   | 	jle Clean
  0x04f: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x055: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x05b: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x061: 6266         | 	andl %esi, %esi
  0x063: 716e000000   | 	jle Npos2
  0x068: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x06e:              | Npos2:
  0x06e: 6222         | 	andl %edx, %edx		# len > 0?
  0x070: 71bb020000   | 	jle Clean
  0x075: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x07b: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x081: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x087: 6266         | 	andl %esi, %esi
  0x089: 7194000000   | 	jle Npos3
  0x08e: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x094:              | Npos3:
  0x094: 6222         | 	andl %edx, %edx		# len > 0?
  0x096: 71bb020000   | 	jle Clean
  0x09b: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x0a1: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x0a7: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x0ad: 6266         | 	andl %esi, %esi
  0x0af: 71ba000000   | 	jle Npos4
  0x0b4: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0ba:              | Npos4:
  0x0ba: 6222         | 	andl %edx, %edx		# len > 0?
  0x0bc: 71bb020000   | 	jle Clean
  0x0c1: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x0c7: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x0cd: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x0d3: 6266         | 	andl %esi, %esi
  0x0d5: 71e0000000   | 	jle Npos5
  0x0da: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0e0:              | Npos5:
  0x0e0: 6222         | 	andl %edx, %edx		# len > 0?
  0x0e2: 71bb020000   | 	jle Clean
  0x0e7: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x0ed: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x0f3: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x0f9: 6266         | 	andl %esi, %esi
  0x0fb: 7106010000   | 	jle Npos6
  0x100: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x106:              | Npos6:
  0x106: 6222         | 	andl %edx, %edx		# len > 0?
  0x108: 71bb020000   | 	jle Clean
  0x10d: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x113: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x119: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x11f: 6266         | 	andl %esi, %esi
  0x121: 712c010000   | 	jle Npos7
  0x126: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x12c:              | Npos7:
  0x12c: 6222         | 	andl %edx, %edx		# len > 0?
  0x12e: 71bb020000   | 	jle Clean
  0x133: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x139: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x13f: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x145: 6266         | 	andl %esi, %esi
  0x147: 7152010000   | 	jle Npos8
  0x14c: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x152:              | Npos8:
  0x152: 6222         | 	andl %edx, %edx		# len > 0?
  0x154: 71bb020000   | 	jle Clean
  0x159: 50631c000000 | 	mrmovl 28(%ebx), %esi	# read val from src...
  0x15f: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x165: 40611c000000 | 	rmmovl %esi, 28(%ecx)	# ...and store it to dst
  0x16b: 6266         | 	andl %esi, %esi
  0x16d: 7178010000   | 	jle Npos9
  0x172: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x178:              | Npos9:
  0x178: 6222         | 	andl %edx, %edx		# len > 0?
  0x17a: 71bb020000   | 	jle Clean
  0x17f: 506320000000 | 	mrmovl 32(%ebx), %esi	# read val from src...
  0x185: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x18b: 406120000000 | 	rmmovl %esi, 32(%ecx)	# ...and store it to dst
  0x191: 6266         | 	andl %esi, %esi
  0x193: 719e010000   | 	jle Npos10
  0x198: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x19e:              | Npos10:
  0x19e: 6222         | 	andl %edx, %edx		# len > 0?
  0x1a0: 71bb020000   | 	jle Clean
  0x1a5: 506324000000 | 	mrmovl 36(%ebx), %esi	# read val from src...
  0x1ab: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1b1: 406124000000 | 	rmmovl %esi, 36(%ecx)	# ...and store it to dst
  0x1b7: 6266         | 	andl %esi, %esi
  0x1b9: 71c4010000   | 	jle Npos11
  0x1be: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x1c4:              | Npos11:
  0x1c4: 6222         | 	andl %edx, %edx		# len > 0?
  0x1c6: 71bb020000   | 	jle Clean
  0x1cb: 506328000000 | 	mrmovl 40(%ebx), %esi	# read val from src...
  0x1d1: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1d7: 406128000000 | 	rmmovl %esi, 40(%ecx)	# ...and store it to dst
  0x1dd: 6266         | 	andl %esi, %esi
  0x1df: 71ea010000   | 	jle Npos12
  0x1e4: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x1ea:              | Npos12:
  0x1ea: 6222         | 	andl %edx, %edx		# len > 0?
  0x1ec: 71bb020000   | 	jle Clean
  0x1f1: 50632c000000 | 	mrmovl 44(%ebx), %esi	# read val from src...
  0x1f7: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1fd: 40612c000000 | 	rmmovl %esi, 44(%ecx)	# ...and store it to dst
  0x203: 6266         | 	andl %esi, %esi
  0x205: 7110020000   | 	jle Npos13
  0x20a: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x210:              | Npos13:
  0x210: 6222         | 	andl %edx, %edx		# len > 0?
  0x212: 71bb020000   | 	jle Clean
  0x217: 506330000000 | 	mrmovl 48(%ebx), %esi	# read val from src...
  0x21d: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x223: 406130000000 | 	rmmovl %esi, 48(%ecx)	# ...and store it to dst
  0x229: 6266         | 	andl %esi, %esi
  0x22b: 7136020000   | 	jle Npos14
  0x230: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x236:              | Npos14:
  0x236: 6222         | 	andl %edx, %edx		# len > 0?
  0x238: 71bb020000   | 	jle Clean
  0x23d: 506334000000 | 	mrmovl 52(%ebx), %esi	# read val from src...
  0x243: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x249: 406134000000 | 	rmmovl %esi, 52(%ecx)	# ...and store it to dst
  0x24f: 6266         | 	andl %esi, %esi
  0x251: 715c020000   | 	jle Npos15
  0x256: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x25c:              | Npos15:
  0x25c: 6222         | 	andl %edx, %edx		# len > 0?
  0x25e: 71bb020000   | 	jle Clean
  0x263: 506338000000 | 	mrmovl 56(%ebx), %esi	# read val from src...
  0x269: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x26f: 406138000000 | 	rmmovl %esi, 56(%ecx)	# ...and store it to dst
  0x275: 6266         | 	andl %esi, %esi
  0x277: 7182020000   | 	jle Npos16
  0x27c: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x282:              | Npos16:
  0x282: 6222         | 	andl %edx, %edx		# len > 0?
  0x284: 71bb020000   | 	jle Clean
  0x289: 50633c000000 | 	mrmovl 60(%ebx), %esi	# read val from src...
  0x28f: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x295: 40613c000000 | 	rmmovl %esi, 60(%ecx)	# ...and store it to dst
  0x29b: c0f340000000 | 	iaddl $64, %ebx		# src++
  0x2a1: c0f140000000 | 	iaddl $64, %ecx		# dst++
  0x2a7: 6266         | 	andl %esi, %esi
  0x2a9: 71b4020000   | 	jle LoopUp
  0x2ae: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x2b4:              | LoopUp:
  0x2b4: 6222         | 	andl %edx,%edx		# len > 0?
  0x2b6: 7648000000   | 	jg Npos				# if so, goto Loop:
                      | 
  0x2bb:              | Clean:
  0x2bb: 6222         | 	andl %edx,%edx		# len = 0?
  0x2bd: 73f4020000   | 	je End				# if so, goto End:
  0x2c2: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x2c8: c0f201000000 | 	iaddl $1, %edx		# len++
  0x2ce: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x2d4: 6266         | 	andl %esi, %esi
  0x2d6: 71e1020000   | 	jle Clean2
  0x2db: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x2e1:              | Clean2:
  0x2e1: c0f3fcffffff | 	iaddl $-4, %ebx		# src++
  0x2e7: c0f1fcffffff | 	iaddl $-4, %ecx		# dst++
  0x2ed: 6222         | 	andl %edx,%edx		# len > 0?
  0x2ef: 76bb020000   | 	jg Clean			# if so, goto clean:
                      | 
  0x2f4:              | End:
  0x2f4: b07f         | 	popl %edi
  0x2f6: b03f         | 	popl %ebx
  0x2f8: b06f         | 	popl %esi
  0x2fa: d0           | 	leave
  0x2fb: 90           | 	ret
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x2fc:              | Done:
  0x2fc: b07f         | 	popl %edi             # Restore callee-save registers
  0x2fe: b03f         | 	popl %ebx
  0x300: b06f         | 	popl %esi
  0x302: 2054         | 	rrmovl %ebp, %esp
  0x304: b05f         | 	popl %ebp
  0x306: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x307:              | End:
                      | #/* $end ncopy-ys */
  0x307:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x308:              | 	.align 4
  0x308:              | src:
  0x308: 01000000     | 	.long 1
  0x30c: 02000000     | 	.long 2
  0x310: 03000000     | 	.long 3
  0x314: 04000000     | 	.long 4
  0x318: 05000000     | 	.long 5
  0x31c: faffffff     | 	.long -6
  0x320: 07000000     | 	.long 7
  0x324: 08000000     | 	.long 8
  0x328: 09000000     | 	.long 9
  0x32c: 0a000000     | 	.long 10
  0x330: 0b000000     | 	.long 11
  0x334: f4ffffff     | 	.long -12
  0x338: f3ffffff     | 	.long -13
  0x33c: f2ffffff     | 	.long -14
  0x340: 0f000000     | 	.long 15
  0x344: f0ffffff     | 	.long -16
  0x348: 11000000     | 	.long 17
  0x34c: 12000000     | 	.long 18
  0x350: 13000000     | 	.long 19
  0x354: ecffffff     | 	.long -20
  0x358: ebffffff     | 	.long -21
  0x35c: eaffffff     | 	.long -22
  0x360: 17000000     | 	.long 23
  0x364: e8ffffff     | 	.long -24
  0x368: e7ffffff     | 	.long -25
  0x36c: e6ffffff     | 	.long -26
  0x370: 1b000000     | 	.long 27
  0x374: e4ffffff     | 	.long -28
  0x378: e3ffffff     | 	.long -29
  0x37c: e2ffffff     | 	.long -30
  0x380: e1ffffff     | 	.long -31
  0x384: e0ffffff     | 	.long -32
  0x388: dfffffff     | 	.long -33
  0x38c: deffffff     | 	.long -34
  0x390: 23000000     | 	.long 35
  0x394: dcffffff     | 	.long -36
  0x398: 25000000     | 	.long 37
  0x39c: daffffff     | 	.long -38
  0x3a0: d9ffffff     | 	.long -39
  0x3a4: d8ffffff     | 	.long -40
  0x3a8: d7ffffff     | 	.long -41
  0x3ac: 2a000000     | 	.long 42
  0x3b0: d5ffffff     | 	.long -43
  0x3b4: d4ffffff     | 	.long -44
  0x3b8: d3ffffff     | 	.long -45
  0x3bc: d2ffffff     | 	.long -46
  0x3c0: d1ffffff     | 	.long -47
  0x3c4: 30000000     | 	.long 48
  0x3c8: 31000000     | 	.long 49
  0x3cc: 32000000     | 	.long 50
  0x3d0: 33000000     | 	.long 51
  0x3d4: ccffffff     | 	.long -52
  0x3d8: 35000000     | 	.long 53
  0x3dc: 36000000     | 	.long 54
  0x3e0: c9ffffff     | 	.long -55
  0x3e4: c8ffffff     | 	.long -56
  0x3e8: c7ffffff     | 	.long -57
  0x3ec: 3a000000     | 	.long 58
  0x3f0: 3b000000     | 	.long 59
  0x3f4: 3c000000     | 	.long 60
  0x3f8: 3d000000     | 	.long 61
  0x3fc: 3e000000     | 	.long 62
  0x400: 3f000000     | 	.long 63
  0x404: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x410:              | 	.align 16
  0x410:              | Predest:
  0x410: fadebc00     | 	.long 0xbcdefa
  0x414:              | dest:
  0x414: abefcd00     | 	.long 0xcdefab
  0x418: abefcd00     | 	.long 0xcdefab
  0x41c: abefcd00     | 	.long 0xcdefab
  0x420: abefcd00     | 	.long 0xcdefab
  0x424: abefcd00     | 	.long 0xcdefab
  0x428: abefcd00     | 	.long 0xcdefab
  0x42c: abefcd00     | 	.long 0xcdefab
  0x430: abefcd00     | 	.long 0xcdefab
  0x434: abefcd00     | 	.long 0xcdefab
  0x438: abefcd00     | 	.long 0xcdefab
  0x43c: abefcd00     | 	.long 0xcdefab
  0x440: abefcd00     | 	.long 0xcdefab
  0x444: abefcd00     | 	.long 0xcdefab
  0x448: abefcd00     | 	.long 0xcdefab
  0x44c: abefcd00     | 	.long 0xcdefab
  0x450: abefcd00     | 	.long 0xcdefab
  0x454: abefcd00     | 	.long 0xcdefab
  0x458: abefcd00     | 	.long 0xcdefab
  0x45c: abefcd00     | 	.long 0xcdefab
  0x460: abefcd00     | 	.long 0xcdefab
  0x464: abefcd00     | 	.long 0xcdefab
  0x468: abefcd00     | 	.long 0xcdefab
  0x46c: abefcd00     | 	.long 0xcdefab
  0x470: abefcd00     | 	.long 0xcdefab
  0x474: abefcd00     | 	.long 0xcdefab
  0x478: abefcd00     | 	.long 0xcdefab
  0x47c: abefcd00     | 	.long 0xcdefab
  0x480: abefcd00     | 	.long 0xcdefab
  0x484: abefcd00     | 	.long 0xcdefab
  0x488: abefcd00     | 	.long 0xcdefab
  0x48c: abefcd00     | 	.long 0xcdefab
  0x490: abefcd00     | 	.long 0xcdefab
  0x494: abefcd00     | 	.long 0xcdefab
  0x498: abefcd00     | 	.long 0xcdefab
  0x49c: abefcd00     | 	.long 0xcdefab
  0x4a0: abefcd00     | 	.long 0xcdefab
  0x4a4: abefcd00     | 	.long 0xcdefab
  0x4a8: abefcd00     | 	.long 0xcdefab
  0x4ac: abefcd00     | 	.long 0xcdefab
  0x4b0: abefcd00     | 	.long 0xcdefab
  0x4b4: abefcd00     | 	.long 0xcdefab
  0x4b8: abefcd00     | 	.long 0xcdefab
  0x4bc: abefcd00     | 	.long 0xcdefab
  0x4c0: abefcd00     | 	.long 0xcdefab
  0x4c4: abefcd00     | 	.long 0xcdefab
  0x4c8: abefcd00     | 	.long 0xcdefab
  0x4cc: abefcd00     | 	.long 0xcdefab
  0x4d0: abefcd00     | 	.long 0xcdefab
  0x4d4: abefcd00     | 	.long 0xcdefab
  0x4d8: abefcd00     | 	.long 0xcdefab
  0x4dc: abefcd00     | 	.long 0xcdefab
  0x4e0: abefcd00     | 	.long 0xcdefab
  0x4e4: abefcd00     | 	.long 0xcdefab
  0x4e8: abefcd00     | 	.long 0xcdefab
  0x4ec: abefcd00     | 	.long 0xcdefab
  0x4f0: abefcd00     | 	.long 0xcdefab
  0x4f4: abefcd00     | 	.long 0xcdefab
  0x4f8: abefcd00     | 	.long 0xcdefab
  0x4fc: abefcd00     | 	.long 0xcdefab
  0x500: abefcd00     | 	.long 0xcdefab
  0x504: abefcd00     | 	.long 0xcdefab
  0x508: abefcd00     | 	.long 0xcdefab
  0x50c: abefcd00     | 	.long 0xcdefab
  0x510:              | Postdest:
  0x510: bcfade00     | 	.long 0xdefabc
                      | 
  0x514:              | .align 4
                      | # Run time stack
  0x514: 00000000     | 	.long 0
  0x518: 00000000     | 	.long 0
  0x51c: 00000000     | 	.long 0
  0x520: 00000000     | 	.long 0
  0x524: 00000000     | 	.long 0
  0x528: 00000000     | 	.long 0
  0x52c: 00000000     | 	.long 0
  0x530: 00000000     | 	.long 0
  0x534: 00000000     | 	.long 0
  0x538: 00000000     | 	.long 0
  0x53c: 00000000     | 	.long 0
  0x540: 00000000     | 	.long 0
  0x544: 00000000     | 	.long 0
  0x548: 00000000     | 	.long 0
  0x54c: 00000000     | 	.long 0
  0x550: 00000000     | 	.long 0
                      | 
  0x554:              | Stack:
